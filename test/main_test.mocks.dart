// Mocks generated by Mockito 5.4.4 from annotations
// in auth_flow_flutter_rxdart/test/main_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:auth_flow_flutter_rxdart/presentation/features/auth/auth_bloc.dart'
    as _i6;
import 'package:auth_flow_flutter_rxdart/presentation/features/main/favourites/favourite_bloc.dart'
    as _i7;
import 'package:auth_flow_flutter_rxdart/presentation/features/main/profile/profile_bloc.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i5;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSink_0<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTextEditingController_1 extends _i1.SmartFake
    implements _i2.TextEditingController {
  _FakeTextEditingController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_2<T> extends _i1.SmartFake
    implements _i3.StreamSubscription<T> {
  _FakeStreamSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProfileBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileBloc extends _i1.Mock implements _i4.ProfileBloc {
  MockProfileBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Function0<void> get disposeBag => (super.noSuchMethod(
        Invocation.getter(#disposeBag),
        returnValue: () {},
      ) as _i5.Function0<void>);

  @override
  Sink<void> get getProfile => (super.noSuchMethod(
        Invocation.getter(#getProfile),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#getProfile),
        ),
      ) as Sink<void>);

  @override
  _i3.Stream<dynamic> get getProfileMessage$ => (super.noSuchMethod(
        Invocation.getter(#getProfileMessage$),
        returnValue: _i3.Stream<dynamic>.empty(),
      ) as _i3.Stream<dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i6.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Function1<String, void> get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: (String a) {},
      ) as _i5.Function1<String, void>);

  @override
  _i5.Function1<String, void> get password => (super.noSuchMethod(
        Invocation.getter(#password),
        returnValue: (String a) {},
      ) as _i5.Function1<String, void>);

  @override
  _i5.Function1<String, void> get confirmPassword => (super.noSuchMethod(
        Invocation.getter(#confirmPassword),
        returnValue: (String a) {},
      ) as _i5.Function1<String, void>);

  @override
  _i5.Function0<void> get disposeBag => (super.noSuchMethod(
        Invocation.getter(#disposeBag),
        returnValue: () {},
      ) as _i5.Function0<void>);

  @override
  Sink<void> get signInWithGoogle => (super.noSuchMethod(
        Invocation.getter(#signInWithGoogle),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#signInWithGoogle),
        ),
      ) as Sink<void>);

  @override
  Sink<void> get signInWithFacebook => (super.noSuchMethod(
        Invocation.getter(#signInWithFacebook),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#signInWithFacebook),
        ),
      ) as Sink<void>);

  @override
  Sink<void> get signInWithApple => (super.noSuchMethod(
        Invocation.getter(#signInWithApple),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#signInWithApple),
        ),
      ) as Sink<void>);

  @override
  Sink<dynamic> get login => (super.noSuchMethod(
        Invocation.getter(#login),
        returnValue: _FakeSink_0<dynamic>(
          this,
          Invocation.getter(#login),
        ),
      ) as Sink<dynamic>);

  @override
  Sink<dynamic> get register => (super.noSuchMethod(
        Invocation.getter(#register),
        returnValue: _FakeSink_0<dynamic>(
          this,
          Invocation.getter(#register),
        ),
      ) as Sink<dynamic>);

  @override
  Sink<void> get logout => (super.noSuchMethod(
        Invocation.getter(#logout),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#logout),
        ),
      ) as Sink<void>);

  @override
  Sink<void> get deleteAccount => (super.noSuchMethod(
        Invocation.getter(#deleteAccount),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#deleteAccount),
        ),
      ) as Sink<void>);

  @override
  Sink<void> get initState => (super.noSuchMethod(
        Invocation.getter(#initState),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#initState),
        ),
      ) as Sink<void>);

  @override
  _i2.TextEditingController get emailTextEditing => (super.noSuchMethod(
        Invocation.getter(#emailTextEditing),
        returnValue: _FakeTextEditingController_1(
          this,
          Invocation.getter(#emailTextEditing),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get passwordTextEditing => (super.noSuchMethod(
        Invocation.getter(#passwordTextEditing),
        returnValue: _FakeTextEditingController_1(
          this,
          Invocation.getter(#passwordTextEditing),
        ),
      ) as _i2.TextEditingController);

  @override
  _i2.TextEditingController get confirmPasswordTextEditing =>
      (super.noSuchMethod(
        Invocation.getter(#confirmPasswordTextEditing),
        returnValue: _FakeTextEditingController_1(
          this,
          Invocation.getter(#confirmPasswordTextEditing),
        ),
      ) as _i2.TextEditingController);

  @override
  _i3.StreamSubscription<dynamic> get authError$ => (super.noSuchMethod(
        Invocation.getter(#authError$),
        returnValue: _FakeStreamSubscription_2<dynamic>(
          this,
          Invocation.getter(#authError$),
        ),
      ) as _i3.StreamSubscription<dynamic>);

  @override
  _i3.Stream<bool> get isLoading$ => (super.noSuchMethod(
        Invocation.getter(#isLoading$),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  _i3.Stream<bool> get isSubmitLogin$ => (super.noSuchMethod(
        Invocation.getter(#isSubmitLogin$),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  _i3.Stream<bool> get isSubmitRegister$ => (super.noSuchMethod(
        Invocation.getter(#isSubmitRegister$),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  _i3.Stream<String?> get email$ => (super.noSuchMethod(
        Invocation.getter(#email$),
        returnValue: _i3.Stream<String?>.empty(),
      ) as _i3.Stream<String?>);

  @override
  _i3.Stream<String?> get password$ => (super.noSuchMethod(
        Invocation.getter(#password$),
        returnValue: _i3.Stream<String?>.empty(),
      ) as _i3.Stream<String?>);

  @override
  _i3.Stream<String?> get confirmPassword$ => (super.noSuchMethod(
        Invocation.getter(#confirmPassword$),
        returnValue: _i3.Stream<String?>.empty(),
      ) as _i3.Stream<String?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FavouriteBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavouriteBloc extends _i1.Mock implements _i7.FavouriteBloc {
  MockFavouriteBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Function0<void> get disposeBag => (super.noSuchMethod(
        Invocation.getter(#disposeBag),
        returnValue: () {},
      ) as _i5.Function0<void>);

  @override
  Sink<void> get getFavouriteList => (super.noSuchMethod(
        Invocation.getter(#getFavouriteList),
        returnValue: _FakeSink_0<void>(
          this,
          Invocation.getter(#getFavouriteList),
        ),
      ) as Sink<void>);

  @override
  _i3.Stream<dynamic> get favoriteList$ => (super.noSuchMethod(
        Invocation.getter(#favoriteList$),
        returnValue: _i3.Stream<dynamic>.empty(),
      ) as _i3.Stream<dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
